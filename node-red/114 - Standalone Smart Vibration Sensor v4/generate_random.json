[{"id":"972ec21fb5d734c1","type":"tab","label":"114 - Data","disabled":false,"info":"","env":[]},{"id":"28ef304887e232f3","type":"inject","z":"972ec21fb5d734c1","name":"Wireless Gateway","props":[{"p":"topic","vt":"str"},{"p":"payload"},{"p":"payload.received","v":"","vt":"date"}],"repeat":"","crontab":"","once":false,"onceDelay":"3","topic":"sensor_data","payload":"{\"nodeId\":0,\"firmware\":6,\"battery\":\"3.28\",\"battery_percent\":\"98.56\",\"counter\":1,\"sensor_type\":114,\"sensor_data\":{\"mode\":3,\"msg_type\":\"regular\",\"odr\":\"800Hz\",\"temperature\":28.26,\"x_rms_ACC_G\":0.001,\"x_max_ACC_G\":0.002,\"x_velocity_mm_sec\":0.03,\"x_displacement_mm\":0.04,\"x_peak_one_Hz\":5,\"x_peak_two_Hz\":6,\"x_peak_three_Hz\":7,\"y_rms_ACC_G\":0.008,\"y_max_ACC_G\":0.009,\"y_velocity_mm_sec\":0.1,\"y_displacement_mm\":0.11,\"y_peak_one_Hz\":12,\"y_peak_two_Hz\":13,\"y_peak_three_Hz\":14,\"z_rms_ACC_G\":0.015,\"z_max_ACC_G\":0.162,\"z_velocity_mm_sec\":1.63,\"z_displacement_mm\":1.64,\"z_peak_one_Hz\":165,\"z_peak_two_Hz\":166,\"z_peak_three_Hz\":256,\"rpm\":167},\"sensor_name\":\"Standalone Smart Vibration Sensor v4\",\"type\":\"sensor_data\",\"addr\":\"00:13:a2:00:42:53:64:53\",\"received\":1737406355706,\"original\":{\"mac\":\"00:13:a2:00:42:53:64:53\",\"receive_options\":{\"ack\":0,\"broadcast\":0,\"type\":\"\"},\"data\":[127,0,1,3,254,222,0,88,0,0,0],\"type\":\"receive_packet\"}}","payloadType":"json","x":210,"y":120,"wires":[["9ae07f82586a9b01"]],"icon":"node-red/serial.svg"},{"id":"2623c171df0d871f","type":"debug","z":"972ec21fb5d734c1","name":"Wireless Gateway","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":650,"y":120,"wires":[]},{"id":"9ae07f82586a9b01","type":"function","z":"972ec21fb5d734c1","name":"dummy data","func":"// Ensure msg.payload and msg.payload.sensor_data exist\nif (!msg.payload || !msg.payload.sensor_data) {\n    node.error(\"Invalid input: msg.payload or msg.payload.sensor_data is missing\", msg);\n    return null;\n}\n\n// Helper function to generate random float between min and max, rounded to decimals\nfunction randomFloat(min, max, decimals) {\n    return Number((Math.random() * (max - min) + min).toFixed(decimals));\n}\n\n// Helper function to generate random integer between min and max (inclusive)\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n// Get or initialize counter from flow context\nlet counter = flow.get(\"counter\") || 0;\ncounter += 1;\nflow.set(\"counter\", counter);\n\n// Generate battery voltage (3.0 to 3.5V)\nconst batteryVoltage = randomFloat(3.0, 3.5, 2);\n// Map battery voltage to percentage (3.0V -> 90%, 3.5V -> 100%)\nconst batteryPercent = randomFloat(90 + (batteryVoltage - 3.0) * 20, 100, 2);\n\n// Update msg.payload with dummy data\nmsg.payload.battery = batteryVoltage.toString();\nmsg.payload.battery_percent = batteryPercent.toString();\nmsg.payload.counter = counter;\n\n// Update sensor_data with dummy data\nmsg.payload.sensor_data.temperature = randomFloat(28.93, 30.02, 2);\n\n// Vibration data for x, y, z axes\nconst axes = ['x', 'y', 'z'];\naxes.forEach(axis => {\n    // RMS acceleration (G): x/y smaller, z larger\n    const rmsAcc = axis === 'z' ? randomFloat(0.01, 0.1, 3) : randomFloat(0.001, 0.05, 3);\n    // Max acceleration (1.5‚Äì2x RMS)\n    const maxAcc = randomFloat(rmsAcc * 1.5, rmsAcc * 2, 3);\n    // Velocity (mm/s): derived from acceleration\n    const velocity = randomFloat(rmsAcc * 10, rmsAcc * 40, 2);\n    // Displacement (mm): small values\n    const displacement = randomFloat(0.01, 0.5, 2);\n    // Frequency peaks (Hz): increasing values\n    const peakOne = randomInt(5, 100);\n    const peakTwo = randomInt(peakOne + 10, peakOne + 50);\n    const peakThree = randomInt(peakTwo + 10, peakTwo + 50);\n\n    msg.payload.sensor_data[`${axis}_rms_ACC_G`] = rmsAcc;\n    msg.payload.sensor_data[`${axis}_max_ACC_G`] = maxAcc;\n    msg.payload.sensor_data[`${axis}_velocity_mm_sec`] = velocity;\n    msg.payload.sensor_data[`${axis}_displacement_mm`] = displacement;\n    msg.payload.sensor_data[`${axis}_peak_one_Hz`] = peakOne;\n    msg.payload.sensor_data[`${axis}_peak_two_Hz`] = peakTwo;\n    msg.payload.sensor_data[`${axis}_peak_three_Hz`] = peakThree;\n});\n\n// Update RPM\nmsg.payload.sensor_data.rpm = randomInt(1500, 3000);\n\n// Return the modified msg\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":390,"y":120,"wires":[["2623c171df0d871f"]]},{"id":"fd6e5e6e9fba9d9a","type":"comment","z":"972ec21fb5d734c1","name":"üëáüèºEnable this node to generate data","info":"","x":200,"y":80,"wires":[]}]
